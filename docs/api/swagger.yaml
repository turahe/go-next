definitions:
  models.Category:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      description:
        type: string
      id:
        type: integer
      medias:
        items:
          $ref: '#/definitions/models.Media'
        type: array
      name:
        type: string
      parentID:
        type: integer
      posts:
        items:
          $ref: '#/definitions/models.Post'
        type: array
      recordDept:
        type: integer
      recordLeft:
        type: integer
      recordOrdering:
        type: integer
      recordRight:
        type: integer
      updatedAt:
        type: string
    type: object
  models.Comment:
    properties:
      content:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      medias:
        items:
          $ref: '#/definitions/models.Media'
        type: array
      parentID:
        type: integer
      post:
        $ref: '#/definitions/models.Post'
      postID:
        type: integer
      recordDept:
        type: integer
      recordLeft:
        type: integer
      recordOrdering:
        type: integer
      recordRight:
        type: integer
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: integer
    type: object
  models.Content:
    properties:
      content:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      modelId:
        type: integer
      modelType:
        type: string
      updatedAt:
        type: string
    type: object
  models.Media:
    properties:
      createdAt:
        type: string
      createdBy:
        type: integer
      customAttribute:
        type: string
      deletedAt:
        type: string
      deletedBy:
        type: integer
      disk:
        type: string
      fileName:
        type: string
      hash:
        type: string
      id:
        type: integer
      mediables:
        items:
          $ref: '#/definitions/models.Mediable'
        type: array
      mimeType:
        type: string
      name:
        type: string
      parentID:
        type: integer
      recordDept:
        type: integer
      recordLeft:
        type: integer
      recordOrdering:
        type: integer
      recordRight:
        type: integer
      size:
        type: integer
      updatedAt:
        type: string
      updatedBy:
        type: integer
      uuid:
        type: string
    type: object
  models.Mediable:
    properties:
      group:
        type: string
      mediaID:
        type: integer
      mediableID:
        type: integer
      mediableType:
        type: string
    type: object
  models.Post:
    properties:
      category:
        $ref: '#/definitions/models.Category'
      categoryID:
        type: integer
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      content:
        type: string
      contents:
        items:
          $ref: '#/definitions/models.Content'
        type: array
      createdAt:
        type: string
      createdBy:
        type: integer
      deletedAt:
        type: string
      deletedBy:
        type: integer
      id:
        type: integer
      medias:
        items:
          $ref: '#/definitions/models.Media'
        type: array
      title:
        type: string
      updatedAt:
        type: string
      updatedBy:
        type: integer
    type: object
  models.Role:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.User:
    properties:
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      createdAt:
        type: string
      email:
        type: string
      emailVerified:
        type: string
      id:
        type: integer
      passwordHash:
        type: string
      phone:
        type: string
      phoneVerified:
        type: string
      posts:
        items:
          $ref: '#/definitions/models.Post'
        type: array
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
      updatedAt:
        type: string
      username:
        type: string
    type: object
  requests.AuthRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      role:
        enum:
        - admin
        - editor
        - moderator
        - user
        - guest
        type: string
      username:
        maxLength: 32
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
info:
  contact: {}
paths:
  /categories:
    get:
      description: Get all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new category
      parameters:
      - description: Category to create
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create category
      tags:
      - categories
  /categories/{id}:
    delete:
      description: Delete a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete category
      tags:
      - categories
    get:
      description: Get a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get category
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update an existing category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category to update
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update category
      tags:
      - categories
  /categories/{id}/children:
    get:
      description: Get direct children of a category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get children categories
      tags:
      - categories
  /categories/{id}/move:
    post:
      consumes:
      - application/json
      description: Move a category to a new parent (nested set)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: New parent category ID
        in: query
        name: parent_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Move category (nested)
      tags:
      - categories
  /categories/{id}/nested:
    delete:
      description: Delete a category and its subtree (nested set)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete category (nested)
      tags:
      - categories
  /categories/nested:
    post:
      consumes:
      - application/json
      description: Create a new category as root or as a child (nested set)
      parameters:
      - description: Category to create
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      - description: Parent category ID
        in: query
        name: parent_id
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create category (nested)
      tags:
      - categories
  /comments:
    post:
      consumes:
      - application/json
      description: Create a new comment
      parameters:
      - description: Comment to create
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create comment
      tags:
      - comments
  /comments/{id}:
    delete:
      description: Delete a comment by ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete comment
      tags:
      - comments
    get:
      description: Get a comment by ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get comment
      tags:
      - comments
    put:
      consumes:
      - application/json
      description: Update an existing comment
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comment to update
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update comment
      tags:
      - comments
  /comments/{id}/children:
    get:
      description: Get direct children of a comment
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Comment'
            type: array
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get children comments
      tags:
      - comments
  /comments/{id}/descendants:
    get:
      description: Get all descendant comments of a comment
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Comment'
            type: array
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get descendant comments
      tags:
      - comments
  /comments/{id}/move:
    post:
      consumes:
      - application/json
      description: Move a comment to a new parent (nested set)
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      - description: New parent comment ID
        in: query
        name: parent_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Move comment (nested)
      tags:
      - comments
  /comments/{id}/nested:
    delete:
      description: Delete a comment and its subtree (nested set)
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete comment (nested)
      tags:
      - comments
  /comments/{id}/parent:
    get:
      description: Get parent of a comment
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get parent comment
      tags:
      - comments
  /comments/{id}/siblings:
    get:
      description: Get sibling comments of a comment
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Comment'
            type: array
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get sibling comments
      tags:
      - comments
  /comments/nested:
    post:
      consumes:
      - application/json
      description: Create a new comment as root or as a child (nested set)
      parameters:
      - description: Comment to create
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      - description: Parent comment ID
        in: query
        name: parent_id
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create comment (nested)
      tags:
      - comments
  /media/{id}/associate:
    post:
      consumes:
      - application/json
      description: Associate a media file with another entity
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: integer
      - description: Association info
        in: body
        name: association
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Associate media
      tags:
      - media
  /media/{id}/children:
    get:
      description: Get direct children of a media item
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Media'
            type: array
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get children media
      tags:
      - media
  /media/{id}/descendants:
    get:
      description: Get all descendant media of a media item
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Media'
            type: array
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get descendant media
      tags:
      - media
  /media/{id}/move:
    post:
      consumes:
      - application/json
      description: Move a media to a new parent (nested set)
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: integer
      - description: New parent media ID
        in: query
        name: parent_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Move media (nested)
      tags:
      - media
  /media/{id}/nested:
    delete:
      description: Delete a media and its subtree (nested set)
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete media (nested)
      tags:
      - media
  /media/{id}/parent:
    get:
      description: Get parent of a media item
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Media'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get parent media
      tags:
      - media
  /media/{id}/siblings:
    get:
      description: Get sibling media of a media item
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Media'
            type: array
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get sibling media
      tags:
      - media
  /media/nested:
    post:
      consumes:
      - application/json
      description: Create a new media as root or as a child (nested set)
      parameters:
      - description: Media to create
        in: body
        name: media
        required: true
        schema:
          $ref: '#/definitions/models.Media'
      - description: Parent media ID
        in: query
        name: parent_id
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Media'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create media (nested)
      tags:
      - media
  /media/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a media file
      parameters:
      - description: Media file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Media'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Upload media
      tags:
      - media
  /posts:
    get:
      description: Get all posts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Post'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Create a new post
      parameters:
      - description: Post to create
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.Post'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create post
      tags:
      - posts
  /posts/{id}:
    delete:
      description: Delete a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete post
      tags:
      - posts
    get:
      description: Get a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get post
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Update an existing post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Post to update
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.Post'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update post
      tags:
      - posts
  /posts/{post_id}/comments:
    get:
      description: Get all comments for a specific post
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Comment'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List comments for a post
      tags:
      - comments
  /users:
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: User creation details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.AuthRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    get:
      description: Get a user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user profile
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update your own user profile
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User profile update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update user profile
      tags:
      - users
  /users/{id}/role:
    put:
      consumes:
      - application/json
      description: Update a user's role
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role update
        in: body
        name: role
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update user role
      tags:
      - users
swagger: "2.0"
