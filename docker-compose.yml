services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: go-next-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-go_next}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./init/postgres:/docker-entrypoint-initdb.d
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d go_next"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Backend service
  backend:
    build:
      context: backend
      dockerfile: Dockerfile
    container_name: go-next-backend
    env_file:
      - backend/.env
    ports:
      - "8080:8080"
    environment:
      - DB_TYPE=${DB_TYPE:-postgres}
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-go_next}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_SSLMODE=${DB_SSLMODE:-disable}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-here}
      - PORT=${PORT:-8080}
      - GIN_MODE=${GIN_MODE:-debug}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3000}
      - APP_ENV=${APP_ENV:-development}
      - REDIS_HOST=${REDIS_HOST:-localhost}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
      - MAIL_HOST=${MAIL_HOST:-localhost}
      - MAIL_PORT=${MAIL_PORT:-1025}
      - MAIL_USERNAME=${MAIL_USERNAME:-}
      - MAIL_PASSWORD=${MAIL_PASSWORD:-}
      - MAIL_FROM=${MAIL_FROM:-noreply@example.com}
    volumes:
      - ./data/backend/log:/root/log
      - ./data/backend/storage:/root/storage
      - ./data/backend:/root/data
    networks:
      - backend-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Admin Frontend service
  admin-frontend:
    build:
      context: admin-frontend
      dockerfile: Dockerfile
    container_name: go-next-admin-frontend
    env_file:
      - admin-frontend/.env
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_BASE_URL=http://localhost:3000
    volumes:
      - ./data/admin-frontend/logs:/var/log/nginx
    networks:
      - backend-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

networks:
  backend-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16